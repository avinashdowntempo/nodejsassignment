#!/usr/bin/env node

const debug = require('debug')('nodejs-assignment:server');
const cluster = require('cluster');
let retrydead = 0;

cluster.on('exit', (worker) => {
 //checking for any worker process dead and reforking new process
  retrydead++;
  //check to create new process only for 10 dead process
  if (retrydead < 10) {
    debug(`worker ${worker.id} died`);
    cluster.fork();
  }

});

// checking if we are the master process
if (cluster.isMaster) {
  //getting the number of cores available in the processor
  let cores = require('os').cpus().length;
  debug(`available cores ${cores}`);

  // creating new worker process for each cores
  for (let i = 0; i < cores; i += 1) {
    debug(`creating new worker process`);
    cluster.fork();
  }

  
} else {
  // If we are in worker process
  const app = require('../app');

  const http = require('http');

  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    let bind = typeof port === 'string' ?
      'Pipe ' + port :
      'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ?
      'pipe ' + addr :
      'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}